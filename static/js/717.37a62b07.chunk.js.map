{"version":3,"file":"static/js/717.37a62b07.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogues/Dialogues.module.css?d141","webpack://samurai-way/./src/components/MessagesFriends/MessagesFriends.module.css?5271","webpack://samurai-way/./src/components/common/stylesForScroll.module.css?3698","components/MessagesFriends/MessagesFriends.tsx","components/Dialogues/Dialogue/Dialogue.tsx","webpack://samurai-way/./src/components/MessageForm/MessageForm.module.css?2a5f","components/MessageForm/MessageForm.tsx","components/Dialogues/Messages/Messages.tsx","components/Dialogues/Dialogues.tsx","components/Dialogues/DialoguesContainer.tsx","hok/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messagesOnline\":\"Dialogues_messagesOnline__UEDjx\",\"containerDialoguesMessages\":\"Dialogues_containerDialoguesMessages__ds8BC\",\"dialogues\":\"Dialogues_dialogues__LsDSu\",\"dialogue\":\"Dialogues_dialogue__PbkwN\",\"message\":\"Dialogues_message__Aw8s3\",\"active\":\"Dialogues_active__VS9TL\",\"contact\":\"Dialogues_contact__RGDp0\",\"contactInfo\":\"Dialogues_contactInfo__cYykX\",\"messagesContainer\":\"Dialogues_messagesContainer__3mk7z\",\"messages\":\"Dialogues_messages__+kCZx\",\"myMessage\":\"Dialogues_myMessage__RxwGC\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactPart\":\"MessagesFriends_contactPart__ALgru\",\"contact\":\"MessagesFriends_contact__V0GCW\",\"avatar\":\"MessagesFriends_avatar__lwglF\",\"contactInfo\":\"MessagesFriends_contactInfo__G1lFv\",\"message\":\"MessagesFriends_message__JJww1\"};","// extracted by mini-css-extract-plugin\nexport default {\"customScrollbar\":\"stylesForScroll_customScrollbar__oO5vd\"};","import { myFriendBase64 } from \"assets/images/base64\";\r\nimport s from './MessagesFriends.module.css'\r\nimport g from '../common/stylesForScroll.module.css'\r\nimport React, { FC } from \"react\";\r\nimport { DialogueDataType, MessageDataType } from \"types/commonTypes\";\r\n\r\ntype Props = {\r\n    dialoguesData: DialogueDataType[]\r\n    messagesData: MessageDataType[]\r\n}\r\n\r\nexport const MessagesFriends: FC<Props> = ({dialoguesData, messagesData}) => {\r\n    return (\r\n        <div>\r\n            <h2>Messages</h2>\r\n            <div className={`${s.contactPart} ${g.customScrollbar}`}>\r\n\r\n                {dialoguesData.map((f,i) => (\r\n\r\n                    <div className={s.contact}>\r\n                        <div className={s.avatar}>\r\n                            <img src={myFriendBase64} alt={f.name}/></div>\r\n                        <div className={s.contactInfo}>\r\n                            <div className={s.name}>\r\n                                <a className=\"\"\r\n                                   href=\"#\">\r\n                                    {f.name}\r\n                                </a>\r\n                            </div>\r\n                            <div className={s.message}>{messagesData[i].message}</div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from '../Dialogues.module.css'\r\nimport { DialogueDataType, MessageDataType } from \"types/commonTypes\";\r\nimport { MessagesFriends } from \"components/MessagesFriends/MessagesFriends\";\r\n\r\ntype Props = {\r\n    dialoguesData: DialogueDataType[]\r\n    messagesData: MessageDataType[]\r\n}\r\n\r\nconst Dialogue: React.FC<Props> = (\r\n    {\r\n        dialoguesData,\r\n        messagesData\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div className={s.dialogues}>\r\n            <MessagesFriends dialoguesData={dialoguesData} messagesData={messagesData}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogue\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageForm\":\"MessageForm_messageForm__kEXhb\"};","import { Form, Field } from 'react-final-form'\r\nimport { composeValidators, maxLength } from \"utils/validators\";\r\nimport { FormControl } from \"../common/FormsControls/FormsControls\";\r\nimport s from './MessageForm.module.css'\r\n\r\nconst maxLength30 = maxLength(200)\r\nfunction MessageForm(props: MessageFormType) {\r\n    return (\r\n        <Form\r\n            onSubmit={(values, form) => {\r\n                props.onSubmit(values);\r\n                setTimeout(form.reset);\r\n            }}\r\n            render={({handleSubmit}) => (\r\n                <form onSubmit={handleSubmit} className={s.messageForm}>\r\n                    <Field component={FormControl}\r\n                           name='textarea'\r\n                           placeholder='Enter your message'\r\n                           validate={composeValidators(maxLength30)}\r\n                    >\r\n                    </Field>\r\n                    <button type='submit'>Add message</button>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\ntype MessageFormType = {\r\n    onSubmit: (newMessage: Record<string, any>) => void\r\n}\r\n\r\nexport default MessageForm;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport s from '../Dialogues.module.css'\r\nimport MessageForm from \"../../MessageForm/MessageForm\";\r\nimport { MessageDataType } from \"types/commonTypes\";\r\nimport { myFriendBase64 } from \"assets/images/base64\";\r\nimport g from '../../common/stylesForScroll.module.css'\r\n\r\ntype Props = {\r\n    messagesData: MessageDataType[]\r\n    addMessage: (newMessage: string) => void\r\n}\r\nconst Messages: React.FC<Props> = (\r\n    {\r\n        messagesData,\r\n        addMessage,\r\n    }\r\n) => {\r\n    const sendMessage = (values: Record<string, any>) => {\r\n        addMessage(values.textarea)\r\n    }\r\n    const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({behavior: 'smooth'});\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messagesData]);\r\n\r\n    return (\r\n        <div className={s.messagesOnline}>\r\n            <div className={`${s.messagesContainer} ${g.customScrollbar}`}>\r\n                <div className={s.contact}>\r\n                    <div className={s.avatar}>\r\n                        <img src={myFriendBase64} alt=\"Linda Johnson\"/>\r\n                    </div>\r\n                    <div className={s.contactInfo}>\r\n                        <div className={s.name}>James Smith</div>\r\n                        <div className={s.online}>Online</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.messages}>\r\n                    <div key={messagesData[0].id} className={` ${s.message}`}>\r\n                        <div className={s.avatar}><img\r\n                            src={myFriendBase64} alt=\"logo\"/>\r\n                        </div>\r\n                        <div className={s.text}>{messagesData[0].message}</div>\r\n                    </div>\r\n                    <div key={messagesData[0].id} className={` ${s.message}`}>\r\n                        <div className={s.avatar}><img\r\n                            src={myFriendBase64} alt=\"logo\"/>\r\n                        </div>\r\n                        <div className={s.text}>Did you like it there?</div>\r\n                    </div>\r\n                    {messagesData.slice(8).map(m => (\r\n                        <div key={m.id} className={` ${s.message}`}>\r\n                            <div className={s.avatar}><img\r\n                                src={myFriendBase64} alt=\"logo\"/>\r\n                            </div>\r\n                            <div className={s.text}>{m.message}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div ref={messagesEndRef}/>\r\n            </div>\r\n            <MessageForm\r\n                onSubmit={sendMessage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n\r\n","import React from 'react';\r\nimport s from './Dialogues.module.css'\r\nimport Dialogue from \"./Dialogue/Dialogue\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport { DialoguesType } from \"./DialoguesContainer\";\r\n\r\nconst Dialogues: React.FC<DialoguesType> = (\r\n    {\r\n        dialoguesData,\r\n        messagesData,\r\n        addMessage,\r\n    }\r\n) => {\r\n    return (\r\n        <div className={s.containerDialoguesMessages}>\r\n            <Dialogue dialoguesData={dialoguesData}\r\n                      messagesData={messagesData}\r\n            />\r\n            <Messages messagesData={messagesData}\r\n                      addMessage={addMessage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogues;\r\n","import React from \"react\";\r\nimport Dialogues from \"./Dialogues\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"store/redux-store\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport {\r\n    addMessageActionCreator,\r\n    InitialStateType,\r\n} from \"store/dialoguesReducer\";\r\nimport { withAuthRedirect } from \"hok/withAuthRedirect\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialoguesData: state.dialoguesPage.dialoguesData,\r\n        messagesData: state.dialoguesPage.messagesData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessage: string) => {\r\n            dispatch(addMessageActionCreator(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = InitialStateType\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\nexport type DialoguesType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogues)\r\n","import React, { ComponentType } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"store/redux-store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function AuthRedirectComponent(props: mapStateToPropsType) {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(AuthRedirectComponent)\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n"],"names":["MessagesFriends","dialoguesData","messagesData","className","s","g","map","f","i","src","myFriendBase64","alt","name","href","message","maxLength30","maxLength","props","onSubmit","values","form","setTimeout","reset","render","handleSubmit","component","FormControl","placeholder","validate","composeValidators","type","addMessage","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","id","slice","m","ref","textarea","compose","withAuthRedirect","connect","state","dialoguesPage","dispatch","newMessage","addMessageActionCreator","Dialogues","mapStateToProps","isAuth","auth","Component","restProps","to"],"sourceRoot":""}