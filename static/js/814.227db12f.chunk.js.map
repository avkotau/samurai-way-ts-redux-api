{"version":3,"file":"static/js/814.227db12f.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/PostMessageForm/PostMessageForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileStatusWithHooks.module.css?392b","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileDate.tsx","components/Profile/ProfileDateForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hok/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"myPostsContainer\":\"MyPosts_myPostsContainer__+FEe4\",\"title\":\"MyPosts_title__8aP6T\",\"posts\":\"MyPosts_posts__yS2tl\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__NPNF1\",\"wrapperLike\":\"Post_wrapperLike__NiHN-\"};","import React, { Component } from 'react';\r\nimport s from './Post.module.css';\r\nimport photoUser from '../../../../assets/images/photoUser.png'\r\nimport { updateLikeAC } from \"store/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nclass Post extends Component<TypeProps, TypeState> {\r\n    constructor(props: TypeProps) {\r\n        super(props);\r\n        this.state = {\r\n            likeCount: props.like,\r\n            isLiked: false,\r\n        };\r\n    }\r\n\r\n    handleLike = () => {\r\n        this.setState(prevState => {\r\n            const newLikeCount = prevState.isLiked ? prevState.likeCount - 1 : prevState.likeCount + 1;\r\n\r\n            this.props.updateLike(this.props.id, newLikeCount);\r\n            return {\r\n                likeCount: newLikeCount,\r\n                isLiked: !prevState.isLiked,\r\n            };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {published, message, photo} = this.props;\r\n        const {likeCount, isLiked} = this.state;\r\n        const likeStyle = isLiked ? {color: '#e70909'} : {};\r\n\r\n        return (\r\n            <>\r\n                <div className={s.post}>\r\n\r\n                    <img src={photo || photoUser} alt='My photo' className={s.photo}/>\r\n\r\n                    <div>\r\n                        <div>{published}</div>\r\n                        <div>{message}</div>\r\n\r\n                        <span onClick={this.handleLike} className={s.wrapperLike}>\r\n                            <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"heart\"\r\n                                 className=\"svg-inline--fa fa-heart fa-lg Post_icon__tP710\" role=\"img\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" style={likeStyle}>\r\n                            <path fill=\"currentColor\"\r\n                                  d=\"M0 190.9V185.1C0 115.2 50.52 55.58 119.4 44.1C164.1 36.51 211.4 51.37 244 84.02L256 96L267.1 84.02C300.6 51.37 347 36.51 392.6 44.1C461.5 55.58 512 115.2 512 185.1V190.9C512 232.4 494.8 272.1 464.4 300.4L283.7 469.1C276.2 476.1 266.3 480 256 480C245.7 480 235.8 476.1 228.3 469.1L47.59 300.4C17.23 272.1 .0003 232.4 .0003 190.9L0 190.9z\">\r\n                            </path>\r\n                            </svg>\r\n                            {likeCount}\r\n                        </span>\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ntype TypeProps = {\r\n    message: string,\r\n    like: number\r\n    photo: string,\r\n    published: string\r\n    id: string\r\n    updateLike: (postId: string, newLikeCount: number) => void\r\n}\r\n\r\ntype TypeState = {\r\n    likeCount: number,\r\n    isLiked: boolean,\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return{\r\n        updateLike: (postId: string, newLikeCount: number) => dispatch(updateLikeAC(postId, newLikeCount))\r\n    }\r\n};\r\n\r\nconst PostContainer = connect(null, mapDispatchToProps)(Post);\r\n\r\nexport default PostContainer;\r\n","import { Field, Form } from \"react-final-form\";\r\nimport { FormControl } from \"../common/FormsControls/FormsControls\";\r\nimport { composeValidators, maxLength } from \"utils/validators\";\r\n\r\nconst maxLength100 = maxLength(100)\r\nconst PostMessageForm = (props: PostMessageType) => {\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={(values, form) => {\r\n                // processing this message, such as sending to redux\r\n                props.onSubmit(values);\r\n                //this function clean form after push button\r\n                form.reset();\r\n            }}\r\n            render={({handleSubmit, valid, values}) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <Field\r\n                        name='message'\r\n                        type='textarea'\r\n                        placeholder='Enter your message'\r\n                        validate={composeValidators(maxLength100)}\r\n                        component={FormControl}\r\n                    />\r\n                    <button type='submit' disabled={!valid || !values.message}>Add post</button>\r\n                </form>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\ntype PostMessageType = {\r\n    onSubmit: (newPost: Record<string, any>) => void\r\n}\r\nexport default PostMessageForm;\r\n","import React, { memo } from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport { MyPostsPropsType } from \"./MyPostsContainer\";\r\nimport PostMessageForm from \"../../PostMessageForm/PostMessageForm\";\r\n\r\nexport const MyPosts = memo<MyPostsPropsType>(props => {\r\n\r\n    const sendPost = (values: Record<string, any>) => {\r\n        const currentDate = new Date();\r\n        const formattedDate = `\r\n        ${currentDate.getDate().toString().padStart(2, '0')}.${(currentDate.getMonth() + 1).toString().padStart(2, '0')}.${currentDate.getFullYear()}, ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}:${currentDate.getSeconds().toString().padStart(2, '0')}`;\r\n        props.addPost({message: values.message, published: formattedDate})\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostsContainer}>\r\n            <h3 className={s.title}>My posts</h3>\r\n            <div>\r\n                <PostMessageForm onSubmit={sendPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {props.postsData.map(el => (\r\n                    <Post key={el.id} id={el.id} message={el.message} like={el.like} photo={props.profile.photos.small} published={el.published}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"store/redux-store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { addPostAC, InitialStateType } from \"store/profileReducer\";\r\nimport { MyPosts } from \"components/Profile/MyPosts/MyPosts\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        statusError: state.profilePage.statusError\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (postData) => {\r\n            dispatch(addPostAC(postData))\r\n        },\r\n    }\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = InitialStateType\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (postData: DateMessage) => void\r\n}\r\n\r\nexport type DateMessage = {\r\n    message: string\r\n    published: string\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;\r\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__tOx+Q\",\"online\":\"ProfileInfo_online__1mSI7\"};","// extracted by mini-css-extract-plugin\nexport default {\"statusText\":\"ProfileStatusWithHooks_statusText__rIjyG\",\"error\":\"ProfileStatusWithHooks_error__W9nzO\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport s from 'components/Profile/ProfileStatusWithHooks.module.css'\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <div>\r\n                <input style={{padding: 10}}\r\n                       value={status}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={changeStatus}\r\n                />\r\n            </div>\r\n            : <>\r\n                <div onDoubleClick={activateEditMode}\r\n                     className={s.statusText}>\r\n                    {status ? status.trim() : 'empty status'}\r\n                </div>\r\n                <div className={s.error}>{props.statusError || ''}</div>\r\n            </>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    statusError?: string\r\n}\r\n","import React from 'react';\r\nimport { ProfileResponseType } from \"store/profileReducer\";\r\n\r\ntype Props = {\r\n    profile: ProfileResponseType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileDate: React.FC<Props> = (props) => {\r\n\r\n    const Contact = ({contactTitle, contactValue}: ContactProps) => {\r\n        return <li>{contactTitle}: {contactValue}</li>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.isOwner && <button onClick={props.goToEditMode}>Edit Data</button>}\r\n\r\n            <dl>\r\n                <dt>Full name:</dt>\r\n                <dd>{props.profile.fullName}</dd>\r\n\r\n                <dt>Looking for a job:</dt>\r\n                <dd>{props.profile.lookingForAJob ? \"Yes\" : \"No\"}</dd>\r\n\r\n                <dt>My professional skills:</dt>\r\n                <dd>{props.profile.lookingForAJobDescription}</dd>\r\n\r\n                <dt>About me:</dt>\r\n                <dd>{props.profile.aboutMe}</dd>\r\n            </dl>\r\n\r\n            <h3>Contact:</h3>\r\n            <ul>\r\n                {Object.keys(props.profile.contacts).map((c, i) => {\r\n                    const key = c as keyof typeof props.profile.contacts;\r\n                    return <Contact key={i} contactTitle={c}\r\n                                    contactValue={props.profile.contacts[key] || '-'}/>\r\n                })}\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\ntype ContactProps = {\r\n    contactTitle: string;\r\n    contactValue: string;\r\n};\r\n","import React from 'react';\r\nimport { FormControl } from \"components/common/FormsControls/FormsControls\";\r\nimport { Field, Form } from \"react-final-form\";\r\nimport { ProfileResponseType } from \"store/profileReducer\";\r\n\r\ntype Props = {\r\n    profile: ProfileResponseType\r\n    onSubmit: (formData: ProfileResponseType) => void\r\n    initialValues: ProfileResponseType\r\n}\r\n\r\nexport const ProfileDateForm = (props: Props) => {\r\n    const {onSubmit} = props\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            initialValues={props.initialValues}\r\n            render={({handleSubmit, submitErrors}) => {\r\n\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        {<button style={{\r\n                            position: 'relative',\r\n                            top: '-35px',\r\n                            right: '-145px'\r\n                        }}\r\n                        >save\r\n                        </button>}\r\n\r\n                        {<div style={{color: 'red', minHeight: '30px'}}>{submitErrors?.submitErrors}</div>}\r\n\r\n                        <dl>\r\n                            <dt>Full name:</dt>\r\n                            <dd>{<Field type='text' name='fullName' placeholder='Full Name'\r\n                                        component={FormControl}/>}</dd>\r\n\r\n                            <dt>Looking for a job:</dt>\r\n                            <dd>{<Field type='checkbox' name='lookingForAJob' placeholder='Looking for a job'\r\n                                        component={FormControl}/>}</dd>\r\n\r\n                            <dt>My professional skills:</dt>\r\n                            <dd>{<Field type='textarea' name='lookingForAJobDescription'\r\n                                        placeholder='My professional skills' component={FormControl}/>}</dd>\r\n\r\n                            <dt>About me:</dt>\r\n                            <dd>{<Field type='textarea' name='AboutMe' placeholder='About me'\r\n                                        component={FormControl}/>}</dd>\r\n\r\n                        </dl>\r\n                        <h3>Contacts:</h3>\r\n                        <ul>\r\n                            {Object.keys(props.profile.contacts).map((c, i) => {\r\n                                const key = c as keyof typeof props.profile.contacts;\r\n                                return <div key={i}>\r\n                                    <b>{key}</b>\r\n                                    <Field type='text' name={'contacts.' + key} placeholder={key}\r\n                                           component={FormControl}/>\r\n                                </div>\r\n                            })}\r\n                        </ul>\r\n                    </form>\r\n                )\r\n            }\r\n            }\r\n        />\r\n    )\r\n}\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { PropsType } from \"../Profile\";\r\nimport { ProfileStatusWithHooks } from \"components/Profile/ProfileStatusWithHooks\";\r\nimport photo from 'assets/images/photoUser.png';\r\nimport { ProfileDate } from \"components/Profile/ProfileDate\";\r\nimport { ProfileDateForm } from \"components/Profile/ProfileDateForm\";\r\nimport { ProfileResponseType } from \"store/profileReducer\";\r\n\r\nexport const ProfileInfo = (props: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleOnSubmit = async (formData: ProfileResponseType) => {\r\n\r\n        const error = await props.saveProfile(formData);\r\n\r\n        if (error) {\r\n            return error\r\n        }\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.description}>\r\n\r\n            <img src={props.profile.photos.large || photo} alt='My photo'/>\r\n\r\n            <div className={s.online}></div>\r\n\r\n            <ProfileStatusWithHooks status={props.status}\r\n                                    updateUserStatus={props.updateUserStatus}\r\n                                    statusError={props.statusError}\r\n            />\r\n            {props.isOwner &&\r\n                <button>\r\n                    <input type={'file'} id=\"fileInput\" style={{ display: 'none' }} onChange={mainPhotoSelected}/>\r\n                    <label htmlFor=\"fileInput\" >\r\n                        Edit Photo\r\n                    </label>\r\n                </button>\r\n            }\r\n            {\r\n                editMode\r\n                    ? <ProfileDateForm initialValues={props.profile} onSubmit={handleOnSubmit}\r\n                                       profile={props.profile}\r\n                    />\r\n                    : <ProfileDate profile={props.profile} isOwner={props.isOwner}\r\n                                   goToEditMode={() => setEditMode(true)}\r\n                    />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileResponseType } from \"store/profileReducer\";\r\nimport { ProfileInfo } from \"components/Profile/ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props: PropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateUserStatus={props.updateUserStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n                         statusError={props.statusError}\r\n            />\r\n            <MyPostsContainer/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport type PropsType = {\r\n    profile: ProfileResponseType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: Blob) => void\r\n    saveProfile: (formData: ProfileResponseType) => Promise<{ submitErrors: string } | undefined>\r\n    statusError?: string\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react';\r\nimport s from './Profile.module.css'\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"store/redux-store\";\r\nimport {\r\n    fetchUserProfile,\r\n    getUserStatus,\r\n    ProfileResponseType,\r\n    savePhoto, saveProfile,\r\n    updateUserStatus\r\n} from \"store/profileReducer\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from 'hok/withAuthRedirect';\r\n\r\nexport const refreshProfile = (props: OwnUsersType & ProfileType) => {\r\n    let userId = props.match.params.userId;\r\n    if (!userId) {\r\n        userId = props.authorizedUserId as string;\r\n    }\r\n    const userIdNumber = parseInt(userId, 10);\r\n    props.fetchUserProfile(userIdNumber);\r\n    props.getUserStatus(userIdNumber);\r\n}\r\n\r\nclass ProfileContainer extends Component<ProfileType> {\r\n\r\n    componentDidMount() {\r\n        refreshProfile(this.props)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        let userId = prevProps.match.params.userId\r\n        if (userId !== this.props.match.params.userId) {\r\n            refreshProfile(this.props)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={s.content}>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n                         statusError={this.props.statusError}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    statusError: state.profilePage.statusError\r\n})\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileResponseType\r\n    status: string\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n    statusError?: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    fetchUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (formData: ProfileResponseType) => Promise<{ submitErrors: string } | undefined>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype OwnUsersType = MapStateToPropsType & MapDispatchToPropsType\r\nexport type ProfileType = RouteComponentProps<PathParamsType> & OwnUsersType\r\n\r\n//With help withRouter new component for get url data from props\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {fetchUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n","import React, { ComponentType } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"store/redux-store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function AuthRedirectComponent(props: mapStateToPropsType) {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(AuthRedirectComponent)\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n"],"names":["Post","props","handleLike","setState","prevState","newLikeCount","isLiked","likeCount","updateLike","id","state","like","this","published","message","photo","likeStyle","color","className","s","src","photoUser","alt","onClick","focusable","role","xmlns","viewBox","style","fill","d","Component","connect","dispatch","postId","updateLikeAC","maxLength100","maxLength","onSubmit","values","form","reset","render","handleSubmit","valid","name","type","placeholder","validate","composeValidators","component","FormControl","disabled","MyPosts","memo","currentDate","Date","formattedDate","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","getSeconds","addPost","postsData","map","el","profile","photos","small","profilePage","status","statusError","postData","addPostAC","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","padding","autoFocus","onBlur","updateUserStatus","onChange","e","currentTarget","onDoubleClick","trim","ProfileDate","Contact","contactTitle","contactValue","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","c","key","ProfileDateForm","initialValues","submitErrors","position","top","right","minHeight","ProfileInfo","Preloader","handleOnSubmit","formData","saveProfile","error","large","display","target","files","savePhoto","htmlFor","refreshProfile","userId","match","params","authorizedUserId","userIdNumber","parseInt","fetchUserProfile","getUserStatus","ProfileContainer","prevProps","snapshot","compose","withAuthRedirect","auth","isAuth","withRouter","mapStateToProps","restProps","to"],"sourceRoot":""}